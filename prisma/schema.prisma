generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model FinanceProfile {
  id                     String   @id @default(cuid())
  name                   String
  mobile                 String
  email                  String
  personal_id            String
  zone                   String
  resident               String
  work_sector            String
  salary                 String
  bank                   String
  haveMortgage           Boolean
  valueOfMortgage        String?
  isTrafficViolations    Boolean
  isDisabled             Boolean
  isVisaInstallments     Boolean
  valueOfVisaInstallment String?
  isPersonalLoan         Boolean
  valueOfPersonalLoan    String?
  isCarInstallment       Boolean
  valueOfCarInstallment  String?
  isAcceptTermsAndPolice Boolean
  vehicle_class          String
  year_of_manufacture    String
  brand                  String
  model                  String
  isArchive              Boolean? @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

model CompanyFund {
  id                   String   @id @default(cuid())
  companyName          String
  mobileNumber         String
  telNumber            String?
  email                String
  zone                 String
  carsCount            String
  bank                 String
  corporateAnniversary String
  isArchive            Boolean? @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}

// User model
enum UserRole {
  ADMIN
  USER
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/User-avatar.svg/2048px-User-avatar.svg.png")
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Cars {
  id                String   @id @default(cuid())
  vehicleClass      String?
  yearOfManufacture String?
  brand             String?
  model             String?
  horsePower        String?
  fuelType          String?
  engineCapacity    String?
  price             String?
  transmission      String?
  AutomotivePropulsionSystems String?
  addToMainPage Boolean? @default(false)
  images String[]
  stock Boolean? @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}


model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}